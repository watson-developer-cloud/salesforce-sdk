/**
 * The IBM Watson Discovery Service is a cognitive search and content analytics engine that you can add to applications
 * to identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and
 * unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual
 * filtering of results.
 *
 * @version V1
 * @see <a href="http://www.ibm.com/watson/developercloud/discovery.html">Discovery</a>
 */
public class IBMDiscoveryV1 extends IBMWatsonService {

  private static final String URL = 'https://gateway.watsonplatform.net/discovery/api';
  private String versionDate;

  /** The Constant VERSION_DATE_2017_09_01. */
    public static final String VERSION_DATE_2017_09_01 = '2017-09-01';
  /** The Constant VERSION_DATE_2017_08_01. */
    public static final String VERSION_DATE_2017_08_01 = '2017-08-01';
  /** The Constant VERSION_DATE_2017_07_19. */
    public static final String VERSION_DATE_2017_07_19 = '2017-07-19';
  /** The Constant VERSION_DATE_2017_06_25. */
    public static final String VERSION_DATE_2017_06_25 = '2017-06-25';
  /** The Constant VERSION_DATE_2016_12_01. */
    public static final String VERSION_DATE_2016_12_01 = '2016-12-01';
  /**
   * Instantiates a new `IBMDiscoveryV1`.
   *
   * @param versionDate The version date (yyyy-MM-dd) of the REST API to use. Specifying this value will keep your API
   *        calls from failing when the service introduces breaking changes.
   */
  public IBMDiscoveryV1(String versionDate) {
    super('watson_discovery_v1');

    if (String.isBlank(versionDate)) {
      throw new IBMWatsonServiceExceptions.IllegalArgumentException('versionDate cannot be null.');
    }
    this.versionDate = versionDate;
  }

  /**
   * Instantiates a new `IBMDiscoveryV1` with username and password.
   *
   * @param versionDate The version date (yyyy-MM-dd) of the REST API to use. Specifying this value will keep your API
   *        calls from failing when the service introduces breaking changes.
   * @param username the username
   * @param password the password
   */
  public IBMDiscoveryV1(String versionDate, String username, String password) {
    this(versionDate);
    setUsernameAndPassword(username, password);
  }

  /**
   * Add an environment.
   *
   * Creates a new environment.  You can create only one environment per service instance. An attempt to create another environment results in an error.
   *
   * @param createEnvironmentOptions the {@link IBMDiscoveryV1Models.CreateEnvironmentOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.Environment} with the response
   */
  public IBMDiscoveryV1Models.Environment createEnvironment(IBMDiscoveryV1Models.CreateEnvironmentOptions createEnvironmentOptions) {
    IBMWatsonValidator.notNull(createEnvironmentOptions, 'createEnvironmentOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpPost(getEndPoint() + '/v1/environments');
    builder.query('version', versionDate);
    final Map<String, Object> contentJson = new Map<String, Object>();
    contentJson.put('name', createEnvironmentOptions.name());
    if (createEnvironmentOptions.description() != null) {
      contentJson.put('description', createEnvironmentOptions.description());
    }
    if (createEnvironmentOptions.size() != null) {
      contentJson.put('size', createEnvironmentOptions.size());
    }
    builder.bodyJson(JSON.serialize(contentJson, true));

    return (IBMDiscoveryV1Models.Environment) createServiceCall(builder.build(), IBMDiscoveryV1Models.Environment.class);
  }

  /**
   * Delete environment.
   *
   * @param deleteEnvironmentOptions the {@link IBMDiscoveryV1Models.DeleteEnvironmentOptions} containing the options for the call
   * @return the service call
   */
  public void deleteEnvironment(IBMDiscoveryV1Models.DeleteEnvironmentOptions deleteEnvironmentOptions) {
    IBMWatsonValidator.notNull(deleteEnvironmentOptions, 'deleteEnvironmentOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpDelete(getEndPoint() + String.format('/v1/environments/{0}', new String[]{ deleteEnvironmentOptions.environmentId() }));
    builder.query('version', versionDate);

    createServiceCall(builder.build(), null);
  }

  /**
   * Get environment info.
   *
   * @param getEnvironmentOptions the {@link IBMDiscoveryV1Models.GetEnvironmentOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.Environment} with the response
   */
  public IBMDiscoveryV1Models.Environment getEnvironment(IBMDiscoveryV1Models.GetEnvironmentOptions getEnvironmentOptions) {
    IBMWatsonValidator.notNull(getEnvironmentOptions, 'getEnvironmentOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpGet(getEndPoint() + String.format('/v1/environments/{0}', new String[]{ getEnvironmentOptions.environmentId() }));
    builder.query('version', versionDate);

    return (IBMDiscoveryV1Models.Environment) createServiceCall(builder.build(), IBMDiscoveryV1Models.Environment.class);
  }

  /**
   * List environments.
   *
   * List existing environments for the service instance.
   *
   * @param listEnvironmentsOptions the {@link IBMDiscoveryV1Models.ListEnvironmentsOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.ListEnvironmentsResponse} with the response
   */
  public IBMDiscoveryV1Models.ListEnvironmentsResponse listEnvironments(IBMDiscoveryV1Models.ListEnvironmentsOptions listEnvironmentsOptions) {
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpGet(getEndPoint() + '/v1/environments');
    builder.query('version', versionDate);
    if (listEnvironmentsOptions != null && listEnvironmentsOptions.name() != null) {
      builder.query('name', listEnvironmentsOptions.name());
    }

    return (IBMDiscoveryV1Models.ListEnvironmentsResponse) createServiceCall(builder.build(), IBMDiscoveryV1Models.ListEnvironmentsResponse.class);
  }

  /**
   * List fields in specified collecitons.
   *
   * Gets a list of the unique fields (and their types) stored in the indexes of the specified collecitons.
   *
   * @param listFieldsOptions the {@link IBMDiscoveryV1Models.ListFieldsOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.ListCollectionFieldsResponse} with the response
   */
  public IBMDiscoveryV1Models.ListCollectionFieldsResponse listFields(IBMDiscoveryV1Models.ListFieldsOptions listFieldsOptions) {
    IBMWatsonValidator.notNull(listFieldsOptions, 'listFieldsOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpGet(getEndPoint() + String.format('/v1/environments/{0}/fields', new String[]{ listFieldsOptions.environmentId() }));
    builder.query('version', versionDate);
    if (listFieldsOptions.collectionIds() != null) {
      builder.query('collection_ids', String.join(listFieldsOptions.collectionIds(), ','));
    }

    return (IBMDiscoveryV1Models.ListCollectionFieldsResponse) createServiceCall(builder.build(), IBMDiscoveryV1Models.ListCollectionFieldsResponse.class);
  }

  /**
   * Update an environment.
   *
   * Updates an environment. The environment's `name` and  `description` parameters can be changed. You must specify a `name` for the environment.
   *
   * @param updateEnvironmentOptions the {@link IBMDiscoveryV1Models.UpdateEnvironmentOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.Environment} with the response
   */
  public IBMDiscoveryV1Models.Environment updateEnvironment(IBMDiscoveryV1Models.UpdateEnvironmentOptions updateEnvironmentOptions) {
    IBMWatsonValidator.notNull(updateEnvironmentOptions, 'updateEnvironmentOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpPut(getEndPoint() + String.format('/v1/environments/{0}', new String[]{ updateEnvironmentOptions.environmentId() }));
    builder.query('version', versionDate);
    final Map<String, Object> contentJson = new Map<String, Object>();
    if (updateEnvironmentOptions.name() != null) {
      contentJson.put('name', updateEnvironmentOptions.name());
    }
    if (updateEnvironmentOptions.description() != null) {
      contentJson.put('description', updateEnvironmentOptions.description());
    }
    builder.bodyJson(JSON.serialize(contentJson, true));

    return (IBMDiscoveryV1Models.Environment) createServiceCall(builder.build(), IBMDiscoveryV1Models.Environment.class);
  }

  /**
   * Add configuration.
   *
   * Creates a new configuration.  If the input configuration contains the `configuration_id`, `created`, or `updated` properties, then they are ignored and overridden by the system, and an error is not returned so that the overridden fields do not need to be removed when copying a configuration.  The configuration can contain unrecognized JSON fields. Any such fields are ignored and do not generate an error. This makes it easier to use newer configuration files with older versions of the API and the service. It also makes it possible for the tooling to add additional metadata and information to the configuration.
   *
   * @param createConfigurationOptions the {@link IBMDiscoveryV1Models.CreateConfigurationOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.Configuration} with the response
   */
  public IBMDiscoveryV1Models.Configuration createConfiguration(IBMDiscoveryV1Models.CreateConfigurationOptions createConfigurationOptions) {
    IBMWatsonValidator.notNull(createConfigurationOptions, 'createConfigurationOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpPost(getEndPoint() + String.format('/v1/environments/{0}/configurations', new String[]{ createConfigurationOptions.environmentId() }));
    builder.query('version', versionDate);
    final Map<String, Object> contentJson = new Map<String, Object>();
    if (createConfigurationOptions.name() != null) {
      contentJson.put('name', createConfigurationOptions.name());
    }
    if (createConfigurationOptions.description() != null) {
      contentJson.put('description', createConfigurationOptions.description());
    }
    if (createConfigurationOptions.conversions() != null) {
      contentJson.put('conversions', createConfigurationOptions.conversions());
    }
    if (createConfigurationOptions.enrichments() != null) {
      contentJson.put('enrichments', createConfigurationOptions.enrichments());
    }
    if (createConfigurationOptions.normalizations() != null) {
      contentJson.put('normalizations', createConfigurationOptions.normalizations());
    }
    builder.bodyJson(JSON.serialize(contentJson, true));

    return (IBMDiscoveryV1Models.Configuration) createServiceCall(builder.build(), IBMDiscoveryV1Models.Configuration.class);
  }

  /**
   * Delete a configuration.
   *
   * The deletion is performed unconditionally. A configuration deletion request succeeds even if the configuration is referenced by a collection or document ingestion. However, documents that have already been submitted for processing continue to use the deleted configuration. Documents are always processed with a snapshot of the configuration as it existed at the time the document was submitted.
   *
   * @param deleteConfigurationOptions the {@link IBMDiscoveryV1Models.DeleteConfigurationOptions} containing the options for the call
   * @return the service call
   */
  public void deleteConfiguration(IBMDiscoveryV1Models.DeleteConfigurationOptions deleteConfigurationOptions) {
    IBMWatsonValidator.notNull(deleteConfigurationOptions, 'deleteConfigurationOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpDelete(getEndPoint() + String.format('/v1/environments/{0}/configurations/{1}', new String[]{ deleteConfigurationOptions.environmentId(), deleteConfigurationOptions.configurationId() }));
    builder.query('version', versionDate);

    createServiceCall(builder.build(), null);
  }

  /**
   * Get configuration details.
   *
   * @param getConfigurationOptions the {@link IBMDiscoveryV1Models.GetConfigurationOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.Configuration} with the response
   */
  public IBMDiscoveryV1Models.Configuration getConfiguration(IBMDiscoveryV1Models.GetConfigurationOptions getConfigurationOptions) {
    IBMWatsonValidator.notNull(getConfigurationOptions, 'getConfigurationOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpGet(getEndPoint() + String.format('/v1/environments/{0}/configurations/{1}', new String[]{ getConfigurationOptions.environmentId(), getConfigurationOptions.configurationId() }));
    builder.query('version', versionDate);

    return (IBMDiscoveryV1Models.Configuration) createServiceCall(builder.build(), IBMDiscoveryV1Models.Configuration.class);
  }

  /**
   * List configurations.
   *
   * Lists existing configurations for the service instance.
   *
   * @param listConfigurationsOptions the {@link IBMDiscoveryV1Models.ListConfigurationsOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.ListConfigurationsResponse} with the response
   */
  public IBMDiscoveryV1Models.ListConfigurationsResponse listConfigurations(IBMDiscoveryV1Models.ListConfigurationsOptions listConfigurationsOptions) {
    IBMWatsonValidator.notNull(listConfigurationsOptions, 'listConfigurationsOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpGet(getEndPoint() + String.format('/v1/environments/{0}/configurations', new String[]{ listConfigurationsOptions.environmentId() }));
    builder.query('version', versionDate);
    if (listConfigurationsOptions.name() != null) {
      builder.query('name', listConfigurationsOptions.name());
    }

    return (IBMDiscoveryV1Models.ListConfigurationsResponse) createServiceCall(builder.build(), IBMDiscoveryV1Models.ListConfigurationsResponse.class);
  }

  /**
   * Update a configuration.
   *
   * Replaces an existing configuration.   * Completely replaces the original configuration.   * The `configuration_id`, `updated`, and `created` fields are accepted in the request, but they are ignored, and an error is not generated. It is also acceptable for users to submit an updated configuration with none of the three properties.   * Documents are processed with a snapshot of the configuration as it was at the time the document was submitted to be ingested. This means that already submitted documents will not see any updates made to the configuration.
   *
   * @param updateConfigurationOptions the {@link IBMDiscoveryV1Models.UpdateConfigurationOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.Configuration} with the response
   */
  public IBMDiscoveryV1Models.Configuration updateConfiguration(IBMDiscoveryV1Models.UpdateConfigurationOptions updateConfigurationOptions) {
    IBMWatsonValidator.notNull(updateConfigurationOptions, 'updateConfigurationOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpPut(getEndPoint() + String.format('/v1/environments/{0}/configurations/{1}', new String[]{ updateConfigurationOptions.environmentId(), updateConfigurationOptions.configurationId() }));
    builder.query('version', versionDate);
    final Map<String, Object> contentJson = new Map<String, Object>();
    if (updateConfigurationOptions.name() != null) {
      contentJson.put('name', updateConfigurationOptions.name());
    }
    if (updateConfigurationOptions.description() != null) {
      contentJson.put('description', updateConfigurationOptions.description());
    }
    if (updateConfigurationOptions.conversions() != null) {
      contentJson.put('conversions', updateConfigurationOptions.conversions());
    }
    if (updateConfigurationOptions.enrichments() != null) {
      contentJson.put('enrichments', updateConfigurationOptions.enrichments());
    }
    if (updateConfigurationOptions.normalizations() != null) {
      contentJson.put('normalizations', updateConfigurationOptions.normalizations());
    }
    builder.bodyJson(JSON.serialize(contentJson, true));

    return (IBMDiscoveryV1Models.Configuration) createServiceCall(builder.build(), IBMDiscoveryV1Models.Configuration.class);
  }

  /**
   * Test configuration.
   *
   * Runs a sample document through the default or your configuration and returns diagnostic information designed to help you understand how the document was processed. The document is not added to the index.
   *
   * @param testConfigurationInEnvironmentOptions the {@link IBMDiscoveryV1Models.TestConfigurationInEnvironmentOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.TestDocument} with the response
   */
  public IBMDiscoveryV1Models.TestDocument testConfigurationInEnvironment(IBMDiscoveryV1Models.TestConfigurationInEnvironmentOptions testConfigurationInEnvironmentOptions) {
    IBMWatsonValidator.notNull(testConfigurationInEnvironmentOptions, 'testConfigurationInEnvironmentOptions cannot be null');
    IBMWatsonValidator.isTrue((testConfigurationInEnvironmentOptions.configuration() != null) || (testConfigurationInEnvironmentOptions.file() != null) || (testConfigurationInEnvironmentOptions.metadata() != null), 'At least one of configuration, file, or metadata must be supplied.');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpPost(getEndPoint() + String.format('/v1/environments/{0}/preview', new String[]{ testConfigurationInEnvironmentOptions.environmentId() }));
    builder.query('version', versionDate);
    if (testConfigurationInEnvironmentOptions.step() != null) {
      builder.query('step', testConfigurationInEnvironmentOptions.step());
    }
    if (testConfigurationInEnvironmentOptions.configurationId() != null) {
      builder.query('configuration_id', testConfigurationInEnvironmentOptions.configurationId());
    }
    IBMWatsonMultipartBody.Builder multipartBuilder = new IBMWatsonMultipartBody.Builder();
    multipartBuilder.setType(IBMWatsonMultipartBody.FORM);
    if (testConfigurationInEnvironmentOptions.configuration() != null) {
      multipartBuilder.addFormDataPart('configuration', testConfigurationInEnvironmentOptions.configuration());
    }
    if (testConfigurationInEnvironmentOptions.file() != null) {
      // for Discovery, we always want to use application/octet-stream
      IBMWatsonRequestBody fileBody = IBMWatsonRequestBody.create(testConfigurationInEnvironmentOptions.file(), IBMWatsonHttpMediaType.APPLICATION_OCTET_STREAM);
      multipartBuilder.addFormDataPart('file', testConfigurationInEnvironmentOptions.filename(), fileBody);
    }
    if (testConfigurationInEnvironmentOptions.metadata() != null) {
      multipartBuilder.addFormDataPart('metadata', testConfigurationInEnvironmentOptions.metadata());
    }
    IBMWatsonMultipartBody multipartBody = multipartBuilder.build();
    builder.body(multipartBody).addHeaders(multipartBody.getAllHeaders());

    return (IBMDiscoveryV1Models.TestDocument) createServiceCall(builder.build(), IBMDiscoveryV1Models.TestDocument.class);
  }

  /**
   * Create a collection.
   *
   * @param createCollectionOptions the {@link IBMDiscoveryV1Models.CreateCollectionOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.Collection} with the response
   */
  public IBMDiscoveryV1Models.Collection createCollection(IBMDiscoveryV1Models.CreateCollectionOptions createCollectionOptions) {
    IBMWatsonValidator.notNull(createCollectionOptions, 'createCollectionOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpPost(getEndPoint() + String.format('/v1/environments/{0}/collections', new String[]{ createCollectionOptions.environmentId() }));
    builder.query('version', versionDate);
    final Map<String, Object> contentJson = new Map<String, Object>();
    contentJson.put('name', createCollectionOptions.name());
    if (createCollectionOptions.description() != null) {
      contentJson.put('description', createCollectionOptions.description());
    }
    if (createCollectionOptions.configurationId() != null) {
      contentJson.put('configuration_id', createCollectionOptions.configurationId());
    }
    if (createCollectionOptions.language() != null) {
      contentJson.put('language', createCollectionOptions.language());
    }
    builder.bodyJson(JSON.serialize(contentJson, true));

    return (IBMDiscoveryV1Models.Collection) createServiceCall(builder.build(), IBMDiscoveryV1Models.Collection.class);
  }

  /**
   * Delete a collection.
   *
   * @param deleteCollectionOptions the {@link IBMDiscoveryV1Models.DeleteCollectionOptions} containing the options for the call
   * @return the service call
   */
  public void deleteCollection(IBMDiscoveryV1Models.DeleteCollectionOptions deleteCollectionOptions) {
    IBMWatsonValidator.notNull(deleteCollectionOptions, 'deleteCollectionOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpDelete(getEndPoint() + String.format('/v1/environments/{0}/collections/{1}', new String[]{ deleteCollectionOptions.environmentId(), deleteCollectionOptions.collectionId() }));
    builder.query('version', versionDate);

    createServiceCall(builder.build(), null);
  }

  /**
   * Get collection details.
   *
   * @param getCollectionOptions the {@link IBMDiscoveryV1Models.GetCollectionOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.Collection} with the response
   */
  public IBMDiscoveryV1Models.Collection getCollection(IBMDiscoveryV1Models.GetCollectionOptions getCollectionOptions) {
    IBMWatsonValidator.notNull(getCollectionOptions, 'getCollectionOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpGet(getEndPoint() + String.format('/v1/environments/{0}/collections/{1}', new String[]{ getCollectionOptions.environmentId(), getCollectionOptions.collectionId() }));
    builder.query('version', versionDate);

    return (IBMDiscoveryV1Models.Collection) createServiceCall(builder.build(), IBMDiscoveryV1Models.Collection.class);
  }

  /**
   * List unique fields.
   *
   * Gets a list of the unique fields (and their types) stored in the index.
   *
   * @param listCollectionFieldsOptions the {@link IBMDiscoveryV1Models.ListCollectionFieldsOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.ListCollectionFieldsResponse} with the response
   */
  public IBMDiscoveryV1Models.ListCollectionFieldsResponse listCollectionFields(IBMDiscoveryV1Models.ListCollectionFieldsOptions listCollectionFieldsOptions) {
    IBMWatsonValidator.notNull(listCollectionFieldsOptions, 'listCollectionFieldsOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpGet(getEndPoint() + String.format('/v1/environments/{0}/collections/{1}/fields', new String[]{ listCollectionFieldsOptions.environmentId(), listCollectionFieldsOptions.collectionId() }));
    builder.query('version', versionDate);

    return (IBMDiscoveryV1Models.ListCollectionFieldsResponse) createServiceCall(builder.build(), IBMDiscoveryV1Models.ListCollectionFieldsResponse.class);
  }

  /**
   * List collections.
   *
   * Lists existing collections for the service instance.
   *
   * @param listCollectionsOptions the {@link IBMDiscoveryV1Models.ListCollectionsOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.ListCollectionsResponse} with the response
   */
  public IBMDiscoveryV1Models.ListCollectionsResponse listCollections(IBMDiscoveryV1Models.ListCollectionsOptions listCollectionsOptions) {
    IBMWatsonValidator.notNull(listCollectionsOptions, 'listCollectionsOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpGet(getEndPoint() + String.format('/v1/environments/{0}/collections', new String[]{ listCollectionsOptions.environmentId() }));
    builder.query('version', versionDate);
    if (listCollectionsOptions.name() != null) {
      builder.query('name', listCollectionsOptions.name());
    }

    return (IBMDiscoveryV1Models.ListCollectionsResponse) createServiceCall(builder.build(), IBMDiscoveryV1Models.ListCollectionsResponse.class);
  }

  /**
   * Update a collection.
   *
   * @param updateCollectionOptions the {@link IBMDiscoveryV1Models.UpdateCollectionOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.Collection} with the response
   */
  public IBMDiscoveryV1Models.Collection updateCollection(IBMDiscoveryV1Models.UpdateCollectionOptions updateCollectionOptions) {
    IBMWatsonValidator.notNull(updateCollectionOptions, 'updateCollectionOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpPut(getEndPoint() + String.format('/v1/environments/{0}/collections/{1}', new String[]{ updateCollectionOptions.environmentId(), updateCollectionOptions.collectionId() }));
    builder.query('version', versionDate);
    final Map<String, Object> contentJson = new Map<String, Object>();
    if (updateCollectionOptions.name() != null) {
      contentJson.put('name', updateCollectionOptions.name());
    }
    if (updateCollectionOptions.description() != null) {
      contentJson.put('description', updateCollectionOptions.description());
    }
    if (updateCollectionOptions.configurationId() != null) {
      contentJson.put('configuration_id', updateCollectionOptions.configurationId());
    }
    builder.bodyJson(JSON.serialize(contentJson, true));

    return (IBMDiscoveryV1Models.Collection) createServiceCall(builder.build(), IBMDiscoveryV1Models.Collection.class);
  }

  /**
   * Add a document.
   *
   * Add a document to a collection with optional metadata.    * The `version` query parameter is still required.    * Returns immediately after the system has accepted the document for processing.    * The user must provide document content, metadata, or both. If the request is missing both document content and metadata, it is rejected.    * The user can set the `Content-Type` parameter on the `file` part to indicate the media type of the document. If the `Content-Type` parameter is missing or is one of the generic media types (for example, `application/octet-stream`), then the service attempts to automatically detect the document's media type.    * The following field names are reserved and will be filtered out if present after normalization: `id`, `score`, `highlight`, and any field with the prefix of: `_`, `+`, or `-`    * Fields with empty name values after normalization are filtered out before indexing.    * Fields containing the following characters after normalization are filtered out before indexing: `#` and `,`.
   *
   * @param addDocumentOptions the {@link IBMDiscoveryV1Models.AddDocumentOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.DocumentAccepted} with the response
   */
  public IBMDiscoveryV1Models.DocumentAccepted addDocument(IBMDiscoveryV1Models.AddDocumentOptions addDocumentOptions) {
    IBMWatsonValidator.notNull(addDocumentOptions, 'addDocumentOptions cannot be null');
    IBMWatsonValidator.isTrue((addDocumentOptions.file() != null) || (addDocumentOptions.metadata() != null), 'At least one of file or metadata must be supplied.');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpPost(getEndPoint() + String.format('/v1/environments/{0}/collections/{1}/documents', new String[]{ addDocumentOptions.environmentId(), addDocumentOptions.collectionId() }));
    builder.query('version', versionDate);
    IBMWatsonMultipartBody.Builder multipartBuilder = new IBMWatsonMultipartBody.Builder();
    multipartBuilder.setType(IBMWatsonMultipartBody.FORM);
    if (addDocumentOptions.file() != null) {
      // for Discovery, we always want to use application/octet-stream
      IBMWatsonRequestBody fileBody = IBMWatsonRequestBody.create(addDocumentOptions.file(), IBMWatsonHttpMediaType.APPLICATION_OCTET_STREAM);
      multipartBuilder.addFormDataPart('file', addDocumentOptions.filename(), fileBody);
    }
    if (addDocumentOptions.metadata() != null) {
      multipartBuilder.addFormDataPart('metadata', addDocumentOptions.metadata());
    }
    IBMWatsonMultipartBody multipartBody = multipartBuilder.build();
    builder.body(multipartBody).addHeaders(multipartBody.getAllHeaders());

    return (IBMDiscoveryV1Models.DocumentAccepted) createServiceCall(builder.build(), IBMDiscoveryV1Models.DocumentAccepted.class);
  }

  /**
   * Delete a document.
   *
   * If the given document ID is invalid, or if the document is not found, then the a success response is returned (HTTP status code `200`) with the status set to 'deleted'.
   *
   * @param deleteDocumentOptions the {@link IBMDiscoveryV1Models.DeleteDocumentOptions} containing the options for the call
   * @return the service call
   */
  public void deleteDocument(IBMDiscoveryV1Models.DeleteDocumentOptions deleteDocumentOptions) {
    IBMWatsonValidator.notNull(deleteDocumentOptions, 'deleteDocumentOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpDelete(getEndPoint() + String.format('/v1/environments/{0}/collections/{1}/documents/{2}', new String[]{ deleteDocumentOptions.environmentId(), deleteDocumentOptions.collectionId(), deleteDocumentOptions.documentId() }));
    builder.query('version', versionDate);

    createServiceCall(builder.build(), null);
  }

  /**
   * Get document details.
   *
   * Fetch status details about a submitted document. **Note:** this operation does not return the document itself. Instead, it returns only the document's processing status and any notices (warnings or errors) that were generated when the document was ingested. Use the query API to retrieve the actual document content.
   *
   * @param getDocumentStatusOptions the {@link IBMDiscoveryV1Models.GetDocumentStatusOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.DocumentStatus} with the response
   */
  public IBMDiscoveryV1Models.DocumentStatus getDocumentStatus(IBMDiscoveryV1Models.GetDocumentStatusOptions getDocumentStatusOptions) {
    IBMWatsonValidator.notNull(getDocumentStatusOptions, 'getDocumentStatusOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpGet(getEndPoint() + String.format('/v1/environments/{0}/collections/{1}/documents/{2}', new String[]{ getDocumentStatusOptions.environmentId(), getDocumentStatusOptions.collectionId(), getDocumentStatusOptions.documentId() }));
    builder.query('version', versionDate);

    return (IBMDiscoveryV1Models.DocumentStatus) createServiceCall(builder.build(), IBMDiscoveryV1Models.DocumentStatus.class);
  }

  /**
   * Update a document.
   *
   * Replace an existing document. Starts ingesting a document with optional metadata.
   *
   * @param updateDocumentOptions the {@link IBMDiscoveryV1Models.UpdateDocumentOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.DocumentAccepted} with the response
   */
  public IBMDiscoveryV1Models.DocumentAccepted updateDocument(IBMDiscoveryV1Models.UpdateDocumentOptions updateDocumentOptions) {
    IBMWatsonValidator.notNull(updateDocumentOptions, 'updateDocumentOptions cannot be null');
    IBMWatsonValidator.isTrue((updateDocumentOptions.file() != null) || (updateDocumentOptions.metadata() != null), 'At least one of file or metadata must be supplied.');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpPost(getEndPoint() + String.format('/v1/environments/{0}/collections/{1}/documents/{2}', new String[]{ updateDocumentOptions.environmentId(), updateDocumentOptions.collectionId(), updateDocumentOptions.documentId() }));
    builder.query('version', versionDate);
    IBMWatsonMultipartBody.Builder multipartBuilder = new IBMWatsonMultipartBody.Builder();
    multipartBuilder.setType(IBMWatsonMultipartBody.FORM);
    if (updateDocumentOptions.file() != null) {
      // for Discovery, we always want to use application/octet-stream
      IBMWatsonRequestBody fileBody = IBMWatsonRequestBody.create(updateDocumentOptions.file(), IBMWatsonHttpMediaType.APPLICATION_OCTET_STREAM);
      multipartBuilder.addFormDataPart('file', updateDocumentOptions.filename(), fileBody);
    }
    if (updateDocumentOptions.metadata() != null) {
      multipartBuilder.addFormDataPart('metadata', updateDocumentOptions.metadata());
    }
    IBMWatsonMultipartBody multipartBody = multipartBuilder.build();
    builder.body(multipartBody).addHeaders(multipartBody.getAllHeaders());

    return (IBMDiscoveryV1Models.DocumentAccepted) createServiceCall(builder.build(), IBMDiscoveryV1Models.DocumentAccepted.class);
  }

  /**
   * Query documents in multiple collections.
   *
   * See the [Discovery service documentation](https://console.bluemix.net/docs/services/discovery/using.html) for more details.
   *
   * @param federatedQueryOptions the {@link IBMDiscoveryV1Models.FederatedQueryOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.QueryResponse} with the response
   */
  public IBMDiscoveryV1Models.QueryResponse federatedQuery(IBMDiscoveryV1Models.FederatedQueryOptions federatedQueryOptions) {
    IBMWatsonValidator.notNull(federatedQueryOptions, 'federatedQueryOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpGet(getEndPoint() + String.format('/v1/environments/{0}/query', new String[]{ federatedQueryOptions.environmentId() }));
    builder.query('version', versionDate);
    if (federatedQueryOptions.collectionIds() != null) {
      builder.query('collection_ids', String.join(federatedQueryOptions.collectionIds(), ','));
    }
    if (federatedQueryOptions.filter() != null) {
      builder.query('filter', federatedQueryOptions.filter());
    }
    if (federatedQueryOptions.query() != null) {
      builder.query('query', federatedQueryOptions.query());
    }
    if (federatedQueryOptions.naturalLanguageQuery() != null) {
      builder.query('natural_language_query', federatedQueryOptions.naturalLanguageQuery());
    }
    if (federatedQueryOptions.aggregation() != null) {
      builder.query('aggregation', federatedQueryOptions.aggregation());
    }
    if (federatedQueryOptions.count() != null) {
      builder.query('count', String.valueOf(federatedQueryOptions.count()));
    }
    if (federatedQueryOptions.returnField() != null) {
      builder.query('return_fields', String.join(federatedQueryOptions.returnField(), ','));
    }
    if (federatedQueryOptions.offset() != null) {
      builder.query('offset', String.valueOf(federatedQueryOptions.offset()));
    }
    if (federatedQueryOptions.sortField() != null) {
      builder.query('sort', String.join(federatedQueryOptions.sortField(), ','));
    }
    if (federatedQueryOptions.highlight() != null) {
      builder.query('highlight', String.valueOf(federatedQueryOptions.highlight()));
    }
    if (federatedQueryOptions.deduplicate() != null) {
      builder.query('deduplicate', String.valueOf(federatedQueryOptions.deduplicate()));
    }
    if (federatedQueryOptions.deduplicateField() != null) {
      builder.query('deduplicate.field', federatedQueryOptions.deduplicateField());
    }

    return (IBMDiscoveryV1Models.QueryResponse) createServiceCall(builder.build(), IBMDiscoveryV1Models.QueryResponse.class);
  }

  /**
   * Query multiple collection system notices.
   *
   * Queries for notices (errors or warnings) that might have been generated by the system. Notices are generated when ingesting documents and performing relevance training. See the [Discovery service documentation](https://console.bluemix.net/docs/services/discovery/using.html) for more details on the query language.
   *
   * @param federatedQueryNoticesOptions the {@link IBMDiscoveryV1Models.FederatedQueryNoticesOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.QueryNoticesResponse} with the response
   */
  public IBMDiscoveryV1Models.QueryNoticesResponse federatedQueryNotices(IBMDiscoveryV1Models.FederatedQueryNoticesOptions federatedQueryNoticesOptions) {
    IBMWatsonValidator.notNull(federatedQueryNoticesOptions, 'federatedQueryNoticesOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpGet(getEndPoint() + String.format('/v1/environments/{0}/notices', new String[]{ federatedQueryNoticesOptions.environmentId() }));
    builder.query('version', versionDate);
    if (federatedQueryNoticesOptions.collectionIds() != null) {
      builder.query('collection_ids', String.join(federatedQueryNoticesOptions.collectionIds(), ','));
    }
    if (federatedQueryNoticesOptions.filter() != null) {
      builder.query('filter', federatedQueryNoticesOptions.filter());
    }
    if (federatedQueryNoticesOptions.query() != null) {
      builder.query('query', federatedQueryNoticesOptions.query());
    }
    if (federatedQueryNoticesOptions.naturalLanguageQuery() != null) {
      builder.query('natural_language_query', federatedQueryNoticesOptions.naturalLanguageQuery());
    }
    if (federatedQueryNoticesOptions.aggregation() != null) {
      builder.query('aggregation', federatedQueryNoticesOptions.aggregation());
    }
    if (federatedQueryNoticesOptions.count() != null) {
      builder.query('count', String.valueOf(federatedQueryNoticesOptions.count()));
    }
    if (federatedQueryNoticesOptions.returnField() != null) {
      builder.query('return_fields', String.join(federatedQueryNoticesOptions.returnField(), ','));
    }
    if (federatedQueryNoticesOptions.offset() != null) {
      builder.query('offset', String.valueOf(federatedQueryNoticesOptions.offset()));
    }
    if (federatedQueryNoticesOptions.sortField() != null) {
      builder.query('sort', String.join(federatedQueryNoticesOptions.sortField(), ','));
    }
    if (federatedQueryNoticesOptions.highlight() != null) {
      builder.query('highlight', String.valueOf(federatedQueryNoticesOptions.highlight()));
    }
    if (federatedQueryNoticesOptions.deduplicateField() != null) {
      builder.query('deduplicate.field', federatedQueryNoticesOptions.deduplicateField());
    }

    return (IBMDiscoveryV1Models.QueryNoticesResponse) createServiceCall(builder.build(), IBMDiscoveryV1Models.QueryNoticesResponse.class);
  }

  /**
   * Query documents.
   *
   * See the [Discovery service documentation](https://console.bluemix.net/docs/services/discovery/using.html) for more details.
   *
   * @param queryOptions the {@link IBMDiscoveryV1Models.QueryOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.QueryResponse} with the response
   */
  public IBMDiscoveryV1Models.QueryResponse query(IBMDiscoveryV1Models.QueryOptions queryOptions) {
    IBMWatsonValidator.notNull(queryOptions, 'queryOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpGet(getEndPoint() + String.format('/v1/environments/{0}/collections/{1}/query', new String[]{ queryOptions.environmentId(), queryOptions.collectionId() }));
    builder.query('version', versionDate);
    if (queryOptions.filter() != null) {
      builder.query('filter', queryOptions.filter());
    }
    if (queryOptions.query() != null) {
      builder.query('query', queryOptions.query());
    }
    if (queryOptions.naturalLanguageQuery() != null) {
      builder.query('natural_language_query', queryOptions.naturalLanguageQuery());
    }
    if (queryOptions.passages() != null) {
      builder.query('passages', String.valueOf(queryOptions.passages()));
    }
    if (queryOptions.aggregation() != null) {
      builder.query('aggregation', queryOptions.aggregation());
    }
    if (queryOptions.count() != null) {
      builder.query('count', String.valueOf(queryOptions.count()));
    }
    if (queryOptions.returnField() != null) {
      builder.query('return', String.join(queryOptions.returnField(), ','));
    }
    if (queryOptions.offset() != null) {
      builder.query('offset', String.valueOf(queryOptions.offset()));
    }
    if (queryOptions.sortField() != null) {
      builder.query('sort', String.join(queryOptions.sortField(), ','));
    }
    if (queryOptions.highlight() != null) {
      builder.query('highlight', String.valueOf(queryOptions.highlight()));
    }
    if (queryOptions.passagesFields() != null) {
      builder.query('passages.fields', String.join(queryOptions.passagesFields(), ','));
    }
    if (queryOptions.passagesCount() != null) {
      builder.query('passages.count', String.valueOf(queryOptions.passagesCount()));
    }
    if (queryOptions.passagesCharacters() != null) {
      builder.query('passages.characters', String.valueOf(queryOptions.passagesCharacters()));
    }
    if (queryOptions.deduplicate() != null) {
      builder.query('deduplicate', String.valueOf(queryOptions.deduplicate()));
    }
    if (queryOptions.deduplicateField() != null) {
      builder.query('deduplicate.field', queryOptions.deduplicateField());
    }

    return (IBMDiscoveryV1Models.QueryResponse) createServiceCall(builder.build(), IBMDiscoveryV1Models.QueryResponse.class);
  }

  /**
   * Query system notices.
   *
   * Queries for notices (errors or warnings) that might have been generated by the system. Notices are generated when ingesting documents and performing relevance training. See the [Discovery service documentation](https://console.bluemix.net/docs/services/discovery/using.html) for more details on the query language.
   *
   * @param queryNoticesOptions the {@link IBMDiscoveryV1Models.QueryNoticesOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.QueryNoticesResponse} with the response
   */
  public IBMDiscoveryV1Models.QueryNoticesResponse queryNotices(IBMDiscoveryV1Models.QueryNoticesOptions queryNoticesOptions) {
    IBMWatsonValidator.notNull(queryNoticesOptions, 'queryNoticesOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpGet(getEndPoint() + String.format('/v1/environments/{0}/collections/{1}/notices', new String[]{ queryNoticesOptions.environmentId(), queryNoticesOptions.collectionId() }));
    builder.query('version', versionDate);
    if (queryNoticesOptions.filter() != null) {
      builder.query('filter', queryNoticesOptions.filter());
    }
    if (queryNoticesOptions.query() != null) {
      builder.query('query', queryNoticesOptions.query());
    }
    if (queryNoticesOptions.naturalLanguageQuery() != null) {
      builder.query('natural_language_query', queryNoticesOptions.naturalLanguageQuery());
    }
    if (queryNoticesOptions.passages() != null) {
      builder.query('passages', String.valueOf(queryNoticesOptions.passages()));
    }
    if (queryNoticesOptions.aggregation() != null) {
      builder.query('aggregation', queryNoticesOptions.aggregation());
    }
    if (queryNoticesOptions.count() != null) {
      builder.query('count', String.valueOf(queryNoticesOptions.count()));
    }
    if (queryNoticesOptions.returnField() != null) {
      builder.query('return_fields', String.join(queryNoticesOptions.returnField(), ','));
    }
    if (queryNoticesOptions.offset() != null) {
      builder.query('offset', String.valueOf(queryNoticesOptions.offset()));
    }
    if (queryNoticesOptions.sortField() != null) {
      builder.query('sort', String.join(queryNoticesOptions.sortField(), ','));
    }
    if (queryNoticesOptions.highlight() != null) {
      builder.query('highlight', String.valueOf(queryNoticesOptions.highlight()));
    }
    if (queryNoticesOptions.passagesFields() != null) {
      builder.query('passages.fields', String.join(queryNoticesOptions.passagesFields(), ','));
    }
    if (queryNoticesOptions.passagesCount() != null) {
      builder.query('passages.count', String.valueOf(queryNoticesOptions.passagesCount()));
    }
    if (queryNoticesOptions.passagesCharacters() != null) {
      builder.query('passages.characters', String.valueOf(queryNoticesOptions.passagesCharacters()));
    }
    if (queryNoticesOptions.deduplicateField() != null) {
      builder.query('deduplicate.field', queryNoticesOptions.deduplicateField());
    }

    return (IBMDiscoveryV1Models.QueryNoticesResponse) createServiceCall(builder.build(), IBMDiscoveryV1Models.QueryNoticesResponse.class);
  }

  /**
   * Adds a query to the training data for this collection. The query can contain a filter and natural language query.
   *
   * @param addTrainingDataOptions the {@link IBMDiscoveryV1Models.AddTrainingDataOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.TrainingQuery} with the response
   */
  public IBMDiscoveryV1Models.TrainingQuery addTrainingData(IBMDiscoveryV1Models.AddTrainingDataOptions addTrainingDataOptions) {
    IBMWatsonValidator.notNull(addTrainingDataOptions, 'addTrainingDataOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpPost(getEndPoint() + String.format('/v1/environments/{0}/collections/{1}/training_data', new String[]{ addTrainingDataOptions.environmentId(), addTrainingDataOptions.collectionId() }));
    builder.query('version', versionDate);
    final Map<String, Object> contentJson = new Map<String, Object>();
    if (addTrainingDataOptions.naturalLanguageQuery() != null) {
      contentJson.put('natural_language_query', addTrainingDataOptions.naturalLanguageQuery());
    }
    if (addTrainingDataOptions.filter() != null) {
      contentJson.put('filter', addTrainingDataOptions.filter());
    }
    if (addTrainingDataOptions.examples() != null) {
      contentJson.put('examples', addTrainingDataOptions.examples());
    }
    builder.bodyJson(JSON.serialize(contentJson, true));

    return (IBMDiscoveryV1Models.TrainingQuery) createServiceCall(builder.build(), IBMDiscoveryV1Models.TrainingQuery.class);
  }

  /**
   * Adds a new example to this training data query.
   *
   * @param createTrainingExampleOptions the {@link IBMDiscoveryV1Models.CreateTrainingExampleOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.TrainingExample} with the response
   */
  public IBMDiscoveryV1Models.TrainingExample createTrainingExample(IBMDiscoveryV1Models.CreateTrainingExampleOptions createTrainingExampleOptions) {
    IBMWatsonValidator.notNull(createTrainingExampleOptions, 'createTrainingExampleOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpPost(getEndPoint() + String.format('/v1/environments/{0}/collections/{1}/training_data/{2}/examples', new String[]{ createTrainingExampleOptions.environmentId(), createTrainingExampleOptions.collectionId(), createTrainingExampleOptions.queryId() }));
    builder.query('version', versionDate);
    final Map<String, Object> contentJson = new Map<String, Object>();
    if (createTrainingExampleOptions.documentId() != null) {
      contentJson.put('document_id', createTrainingExampleOptions.documentId());
    }
    if (createTrainingExampleOptions.crossReference() != null) {
      contentJson.put('cross_reference', createTrainingExampleOptions.crossReference());
    }
    if (createTrainingExampleOptions.relevance() != null) {
      contentJson.put('relevance', createTrainingExampleOptions.relevance());
    }
    builder.bodyJson(JSON.serialize(contentJson, true));

    return (IBMDiscoveryV1Models.TrainingExample) createServiceCall(builder.build(), IBMDiscoveryV1Models.TrainingExample.class);
  }

  /**
   * Clears all training data for this collection.
   *
   * @param deleteAllTrainingDataOptions the {@link IBMDiscoveryV1Models.DeleteAllTrainingDataOptions} containing the options for the call
   * @return the service call
   */
  public void deleteAllTrainingData(IBMDiscoveryV1Models.DeleteAllTrainingDataOptions deleteAllTrainingDataOptions) {
    IBMWatsonValidator.notNull(deleteAllTrainingDataOptions, 'deleteAllTrainingDataOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpDelete(getEndPoint() + String.format('/v1/environments/{0}/collections/{1}/training_data', new String[]{ deleteAllTrainingDataOptions.environmentId(), deleteAllTrainingDataOptions.collectionId() }));
    builder.query('version', versionDate);

    createServiceCall(builder.build(), null);
  }

  /**
   * Removes the training data and all associated examples from the training data set.
   *
   * @param deleteTrainingDataOptions the {@link IBMDiscoveryV1Models.DeleteTrainingDataOptions} containing the options for the call
   * @return the service call
   */
  public void deleteTrainingData(IBMDiscoveryV1Models.DeleteTrainingDataOptions deleteTrainingDataOptions) {
    IBMWatsonValidator.notNull(deleteTrainingDataOptions, 'deleteTrainingDataOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpDelete(getEndPoint() + String.format('/v1/environments/{0}/collections/{1}/training_data/{2}', new String[]{ deleteTrainingDataOptions.environmentId(), deleteTrainingDataOptions.collectionId(), deleteTrainingDataOptions.queryId() }));
    builder.query('version', versionDate);

    createServiceCall(builder.build(), null);
  }

  /**
   * Removes the example with the given ID for the training data query.
   *
   * @param deleteTrainingExampleOptions the {@link IBMDiscoveryV1Models.DeleteTrainingExampleOptions} containing the options for the call
   * @return the service call
   */
  public void deleteTrainingExample(IBMDiscoveryV1Models.DeleteTrainingExampleOptions deleteTrainingExampleOptions) {
    IBMWatsonValidator.notNull(deleteTrainingExampleOptions, 'deleteTrainingExampleOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpDelete(getEndPoint() + String.format('/v1/environments/{0}/collections/{1}/training_data/{2}/examples/{3}', new String[]{ deleteTrainingExampleOptions.environmentId(), deleteTrainingExampleOptions.collectionId(), deleteTrainingExampleOptions.queryId(), deleteTrainingExampleOptions.exampleId() }));
    builder.query('version', versionDate);

    createServiceCall(builder.build(), null);
  }

  /**
   * Shows details for a specific training data query, including the query string and all examples.
   *
   * @param getTrainingDataOptions the {@link IBMDiscoveryV1Models.GetTrainingDataOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.TrainingQuery} with the response
   */
  public IBMDiscoveryV1Models.TrainingQuery getTrainingData(IBMDiscoveryV1Models.GetTrainingDataOptions getTrainingDataOptions) {
    IBMWatsonValidator.notNull(getTrainingDataOptions, 'getTrainingDataOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpGet(getEndPoint() + String.format('/v1/environments/{0}/collections/{1}/training_data/{2}', new String[]{ getTrainingDataOptions.environmentId(), getTrainingDataOptions.collectionId(), getTrainingDataOptions.queryId() }));
    builder.query('version', versionDate);

    return (IBMDiscoveryV1Models.TrainingQuery) createServiceCall(builder.build(), IBMDiscoveryV1Models.TrainingQuery.class);
  }

  /**
   * Gets the details for this training example.
   *
   * @param getTrainingExampleOptions the {@link IBMDiscoveryV1Models.GetTrainingExampleOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.TrainingExample} with the response
   */
  public IBMDiscoveryV1Models.TrainingExample getTrainingExample(IBMDiscoveryV1Models.GetTrainingExampleOptions getTrainingExampleOptions) {
    IBMWatsonValidator.notNull(getTrainingExampleOptions, 'getTrainingExampleOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpGet(getEndPoint() + String.format('/v1/environments/{0}/collections/{1}/training_data/{2}/examples/{3}', new String[]{ getTrainingExampleOptions.environmentId(), getTrainingExampleOptions.collectionId(), getTrainingExampleOptions.queryId(), getTrainingExampleOptions.exampleId() }));
    builder.query('version', versionDate);

    return (IBMDiscoveryV1Models.TrainingExample) createServiceCall(builder.build(), IBMDiscoveryV1Models.TrainingExample.class);
  }

  /**
   * Lists the training data for this collection.
   *
   * @param listTrainingDataOptions the {@link IBMDiscoveryV1Models.ListTrainingDataOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.TrainingDataSet} with the response
   */
  public IBMDiscoveryV1Models.TrainingDataSet listTrainingData(IBMDiscoveryV1Models.ListTrainingDataOptions listTrainingDataOptions) {
    IBMWatsonValidator.notNull(listTrainingDataOptions, 'listTrainingDataOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpGet(getEndPoint() + String.format('/v1/environments/{0}/collections/{1}/training_data', new String[]{ listTrainingDataOptions.environmentId(), listTrainingDataOptions.collectionId() }));
    builder.query('version', versionDate);

    return (IBMDiscoveryV1Models.TrainingDataSet) createServiceCall(builder.build(), IBMDiscoveryV1Models.TrainingDataSet.class);
  }

  /**
   * Changes the label or cross reference query for this training example.
   *
   * @param updateTrainingExampleOptions the {@link IBMDiscoveryV1Models.UpdateTrainingExampleOptions} containing the options for the call
   * @return the {@link IBMDiscoveryV1Models.TrainingExample} with the response
   */
  public IBMDiscoveryV1Models.TrainingExample updateTrainingExample(IBMDiscoveryV1Models.UpdateTrainingExampleOptions updateTrainingExampleOptions) {
    IBMWatsonValidator.notNull(updateTrainingExampleOptions, 'updateTrainingExampleOptions cannot be null');
    IBMWatsonRequestBuilder builder = IBMWatsonRequestBuilder.httpPut(getEndPoint() + String.format('/v1/environments/{0}/collections/{1}/training_data/{2}/examples/{3}', new String[]{ updateTrainingExampleOptions.environmentId(), updateTrainingExampleOptions.collectionId(), updateTrainingExampleOptions.queryId(), updateTrainingExampleOptions.exampleId() }));
    builder.query('version', versionDate);
    final Map<String, Object> contentJson = new Map<String, Object>();
    if (updateTrainingExampleOptions.crossReference() != null) {
      contentJson.put('cross_reference', updateTrainingExampleOptions.crossReference());
    }
    if (updateTrainingExampleOptions.relevance() != null) {
      contentJson.put('relevance', updateTrainingExampleOptions.relevance());
    }
    builder.bodyJson(JSON.serialize(contentJson, true));

    return (IBMDiscoveryV1Models.TrainingExample) createServiceCall(builder.build(), IBMDiscoveryV1Models.TrainingExample.class);
  }

}
